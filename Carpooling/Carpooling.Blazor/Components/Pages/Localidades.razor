@page "/localidades"
@rendermode InteractiveServer

@using DTOs
@using API.Clients
@inject ServicioSesionUsuario SesionUsuario
@inject NavigationManager Navigation

<h3>Gestión de Localidades</h3>

@if (puedeAcceder)
{
    <div class="mb-3">
        <button class="btn btn-success" @onclick="AgregarLocalidad">
            <span class="bi bi-plus-circle-fill"></span> Agregar Nueva Localidad
        </button>
    </div>

    @if (localidades == null)
    {
        <p><em>Cargando localidades...</em></p>
    }
    else if (localidades.Count == 0)
    {
        <p>No hay localidades cargadas.</p>
    }
    else
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Código Postal</th>
                    <th>Nombre</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var loc in localidades)
                {
                    <tr>
                        <td>@loc.CodPostal</td>
                        <td>@loc.Nombre</td>
                        <td>
                            <button class="btn btn-primary btn-sm" @onclick="() => EditarLocalidad(loc.CodPostal)">Editar</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => EliminarLocalidad(loc.CodPostal)">Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    @if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger mt-3">@error</div>
    }
}
else
{
    <div class="alert alert-danger">Acceso denegado. Debes ser Administrador.</div>
}


@code {
    private List<LocalidadDTO> localidades;
    private bool puedeAcceder = false;
    private string error;

    protected override async Task OnInitializedAsync()
    {
        // Verificamos si el usuario es Administrador
        if (SesionUsuario.EstaLogueado && SesionUsuario.UsuarioActual.TipoUsuario == Domain.Model.TipoUsuario.Administrador)
        {
            puedeAcceder = true;
            await CargarLocalidades();
        }
        else
        {
            puedeAcceder = false;
        }
    }

    private async Task CargarLocalidades()
    {
        error = string.Empty; // Limpiamos errores previos
        try
        {
            localidades = (await LocalidadApiClient.GetAllAsync()).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar localidades: {ex.Message}");
            error = "No se pudieron cargar las localidades. Intente más tarde.";
            localidades = new List<LocalidadDTO>();
        }
    }

    private void AgregarLocalidad()
    {
        Navigation.NavigateTo("/localidad/nueva");
    }

    private void EditarLocalidad(string codPostal)
    {
        Navigation.NavigateTo($"/localidad/editar/{codPostal}");
    }

    private async Task EliminarLocalidad(string codPostal)
    {
        error = string.Empty;
        // Aquí podrías agregar una confirmación tipo Javascript si querés
        // var confirmado = await JS.InvokeAsync<bool>("confirm", $"¿Está seguro de eliminar la localidad {codPostal}?");
        // if (!confirmado) return;

        try
        {
            await LocalidadApiClient.DeleteAsync(codPostal);
            await CargarLocalidades(); // Recargamos la lista
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar localidad: {ex.Message}");
            error = ex.Message;
        }
    }
}