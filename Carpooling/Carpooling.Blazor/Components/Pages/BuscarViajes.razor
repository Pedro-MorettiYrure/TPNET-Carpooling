@page "/buscar-viajes"
@rendermode InteractiveServer

@using DTOs
@using API.Clients
@using Domain.Model
@inject ServicioSesionUsuario SesionUsuario

@inject NavigationManager Navigation

<h3>Buscar Viajes</h3>

<EditForm Model="@viajeModel" OnValidSubmit="CargarViajesAsync" FormName="FiltroForm">
    <DataAnnotationsValidator />
    <ValidationSummary /> @* Muestra un resumen de todos los errores *@
    <div class="mb-3">
        <label class="form-label">Origen:</label>
        <InputSelect class="form-select" @bind-Value="viajeModel.OrigenCodPostal">
            <option value="">Seleccione una localidad...</option>
            @if (localidades != null)
            {
                @foreach (var loc in localidades)
                {
                    <option value="@loc.CodPostal">@loc.Nombre (@loc.CodPostal)</option>
                }
            }
        </InputSelect>
    </div>

    <div class="mb-3">
        <label class="form-label">Destino:</label>
        <InputSelect class="form-select" @bind-Value="viajeModel.DestinoCodPostal">
            <option value="">Seleccione una localidad...</option>
            @if (localidades != null)
            {
                @foreach (var loc in localidades)
                {
                    <option value="@loc.CodPostal">@loc.Nombre (@loc.CodPostal)</option>
                }
            }
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-primary">Buscar</button>

</EditForm>

<br />

@if (origen == null || destino == null)
{
    <p><em>Seleccione el Origen y Destino</em></p>
}
else if(viajes == null)
{
    <p><em>Cargando viajes...</em></p>
}
else if (viajes.Count == 0)
{
    <p>No hay viajes publicados de @origen.Nombre a @destino.Nombre.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Fecha y Hora</th>
                <th>Origen</th>
                <th>Destino</th>
                <th>Lugares Disp.</th>
                <th>Precio</th>
                <th>Estado</th>
                <th>Comentarios</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var viaje in viajes)
            {
                @if (viaje.Estado == EstadoViaje.Pendiente){
                    <tr>
                        <td>@viaje.FechaHora.ToString("dd/MM/yyyy HH:mm")</td>
                        <td>@viaje.OrigenCodPostal</td> @* Idealmente, aquí buscarías el nombre de la localidad *@
                        <td>@viaje.DestinoCodPostal</td> @* Idealmente, aquí buscarías el nombre de la localidad *@
                        <td>@viaje.CantLugares</td>
                        <td>@viaje.Precio.ToString("C")</td>
                        <td>@viaje.Estado</td>
                        <td>@viaje.Comentario</td>
                        <td>

                            <button class="btn btn-primary btn-sm" @onclick="() => SolicitarViajeAsync(viaje.IdViaje)">Solicitar</button>

                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}



@code {
    private ViajeDTO viajeModel = new ViajeDTO();
    private string? origenCodPostal;
    private string? destinoCodPostal;
    private LocalidadDTO? origen;
    private LocalidadDTO? destino;
    private List<ViajeDTO>? viajes;
    private List<LocalidadDTO>? localidades;
    private bool puedeAcceder = false;
    private string? error;

    protected override async Task OnInitializedAsync()
    {
        await CargarLocalidades();
        //await CargarViajes();

    }

    private async Task CargarLocalidades()
    {
        try
        {
            localidades = (await LocalidadApiClient.GetAllAsync()).ToList();
        }
        catch (Exception ex)
        {
            error = $"Error al cargar listas: {ex.Message}";
            localidades = new List<LocalidadDTO>();

        }
    } 

    private async Task CargarViajesAsync()
    {
        try
        {
            origen = (LocalidadDTO) localidades.Where(l=> l.CodPostal == viajeModel.OrigenCodPostal).First();
            destino = (LocalidadDTO) localidades.Where(l => l.CodPostal == viajeModel.DestinoCodPostal).First();

            var viajesList = await ViajeApiClient.BuscarViajesAsync(origen.CodPostal, destino.CodPostal);
            viajes = viajesList.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar viajes: {ex.Message}");
            viajes = new List<ViajeDTO>(); // Dejar la lista vacía si hay error
        }
    }

    private async void SolicitarViajeAsync(int idViaje)
    {
        try
        {
            var usuario = SesionUsuario.UsuarioActual;

            SolicitudViajeDTO sol = new SolicitudViajeDTO()
                {
                    SolicitudFecha = DateTime.Now,
                    IdViaje = idViaje,
                    IdPasajero = usuario.IdUsuario,
                    NombrePasajero = usuario.Nombre,    //revisar si dejar o sacar
                    ApellidoPasajero = usuario.Apellido
                };
            await SolicitudViajeApiClient.CrearSolicitudAsync(sol);
        }
        catch (Exception ex)
        {
            error = $"No se pudo guardar el viaje: {ex.Message}";   
        }
    }
}