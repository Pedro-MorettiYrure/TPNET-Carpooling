@page "/buscar-viajes"
@rendermode InteractiveServer

@using DTOs
@using API.Clients
@using Domain.Model
@inject ServicioSesionUsuario SesionUsuario
@inject NavigationManager Navigation

<h3>Buscar Viajes</h3>


    @if (viajes == null)
    {
        <p><em>Cargando viajes...</em></p>
    }
    else if (viajes.Count == 0)
    {
        <p>No hay viajes publicados.</p>
    }
    else
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Fecha y Hora</th>
                    <th>Origen</th>
                    <th>Destino</th>
                    <th>Lugares Disp.</th>
                    <th>Precio</th>
                    <th>Estado</th>
                    <th>Comentarios</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var viaje in viajes)
                {
                    @if (viaje.Estado == EstadoViaje.Pendiente){
                        <tr>
                            <td>@viaje.FechaHora.ToString("dd/MM/yyyy HH:mm")</td>
                            <td>@viaje.OrigenCodPostal</td> @* Idealmente, aquí buscarías el nombre de la localidad *@
                            <td>@viaje.DestinoCodPostal</td> @* Idealmente, aquí buscarías el nombre de la localidad *@
                            <td>@viaje.CantLugares</td>
                            <td>@viaje.Precio.ToString("C")</td>
                            <td>@viaje.Estado</td>
                            <td>@viaje.Comentario</td>
                            <td>
                                
                                <button class="btn btn-primary btn-sm" @onclick="() => SolicitarViaje(viaje.IdViaje)">Solicitar</button>
                                
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    }



@code {
    private List<ViajeDTO>? viajes;
    private bool puedeAcceder = false;

    protected override async Task OnInitializedAsync()
    {
        
            await CargarViajes();
        
    }

    private async Task CargarViajes()
    {
        try
        {
            var viajesList = await ViajeApiClient.GetByConductorAsync(1); //PRUEBA TEST BORRAR
            viajes = viajesList.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar viajes: {ex.Message}");
            viajes = new List<ViajeDTO>(); // Dejar la lista vacía si hay error
        }
    }

    private void AgregarViaje()
    {
        // Navegamos a la página para crear un nuevo viaje
        Navigation.NavigateTo("/viaje/nuevo");
    }

    private void EditarViaje(int idViaje)
    {
        // Navegamos a la página de detalle para editar el viaje específico
        Navigation.NavigateTo($"/viaje/editar/{idViaje}");
    }

    private async Task CancelarViaje(int idViaje)
    {
        // Podríamos agregar un diálogo de confirmación aquí si quisiéramos

        try
        {
            // Llamamos al método Delete de la API.
            await ViajeApiClient.DeleteAsync(idViaje);
            // Recargamos la lista para que se actualice el estado del viaje cancelado
            await CargarViajes();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cancelar el viaje: {ex.Message}");
            // Mostrar un mensaje de error al usuario sería ideal
        }

    }

    //================================================================================================

    private void SolicitarViaje(int idViaje)
    {
        // Navegamos a la página de detalle para editar el viaje específico
        Navigation.NavigateTo($"/viaje/editar/{idViaje}");
    }
}