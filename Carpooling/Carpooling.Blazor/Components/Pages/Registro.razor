@page "/registro"
@rendermode InteractiveServer

@using DTOs
@using API.Clients
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation

<h3>Registrar Nuevo Usuario</h3>

<div class="card">
    <div class="card-body">
        <EditForm Model="@registroModel" OnValidSubmit="ManejarRegistro">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label class="form-label">Nombre:</label>
                <InputText class="form-control" @bind-Value="registroModel.Nombre" />
                <ValidationMessage For="@(() => registroModel.Nombre)" />
            </div>
            <div class="mb-3">
                <label class="form-label">Apellido:</label>
                <InputText class="form-control" @bind-Value="registroModel.Apellido" />
                <ValidationMessage For="@(() => registroModel.Apellido)" />
            </div>
            <div class="mb-3">
                <label class="form-label">Email:</label>
                <InputText type="email" class="form-control" @bind-Value="registroModel.Email" />
                <ValidationMessage For="@(() => registroModel.Email)" />
            </div>
            <div class="mb-3">
                <label class="form-label">Teléfono:</label>
                <InputText class="form-control" @bind-Value="registroModel.Telefono" />
                <ValidationMessage For="@(() => registroModel.Telefono)" />
            </div>
            <div class="mb-3">
                <label class="form-label">Contraseña:</label>
                <InputText type="password" class="form-control" @bind-Value="registroModel.Contraseña" />
                <ValidationMessage For="@(() => registroModel.Contraseña)" />
            </div>
            <div class="mb-3">
                <label class="form-label">Confirmar Contraseña:</label>
                <InputText type="password" class="form-control" @bind-Value="registroModel.ConfirmarContraseña" />
                <ValidationMessage For="@(() => registroModel.ConfirmarContraseña)" />
            </div>

            @if (!string.IsNullOrEmpty(error))
            {
                <div class="alert alert-danger">@error</div>
            }

            <button type="submit" class="btn btn-primary">Registrarse</button>

        </EditForm>
    </div>
</div>

@code {
    private RegistroModel registroModel = new();
    private string error;

    private async Task ManejarRegistro()
    {
        error = string.Empty;
        if (registroModel.Contraseña != registroModel.ConfirmarContraseña)
        {
            error = "Las contraseñas no coinciden.";
            return;
        }

        try
        {
            var usuarioDto = new UsuarioDTO
            {
                Nombre = registroModel.Nombre,
                Apellido = registroModel.Apellido,
                Email = registroModel.Email,
                Contraseña = registroModel.Contraseña,
                Telefono = registroModel.Telefono
            };

            await UsuarioApiClient.RegistrarUsuarioAsync(usuarioDto);

            // Ahora esta navegación funcionará correctamente.
            Navigation.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            error = $"Error al registrar usuario: {ex.Message}";
        }
    }

    public class RegistroModel
    {
        [Required(ErrorMessage = "El nombre es obligatorio.")]
        public string Nombre { get; set; }
        [Required(ErrorMessage = "El apellido es obligatorio.")]
        public string Apellido { get; set; }
        [Required(ErrorMessage = "El email es obligatorio.")]
        [EmailAddress(ErrorMessage = "El formato del email no es válido.")]
        public string Email { get; set; }
        [Required(ErrorMessage = "El teléfono es obligatorio.")]
        public string Telefono { get; set; }
        [Required(ErrorMessage = "La contraseña es obligatoria.")]
        public string Contraseña { get; set; }
        [Required(ErrorMessage = "Debe confirmar la contraseña.")]
        public string ConfirmarContraseña { get; set; }
    }
}